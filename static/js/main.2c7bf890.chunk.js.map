{"version":3,"sources":["weather-display.js","App.js","index.js"],"names":["WeatherDisplay","props","iconUrl","data","icon","sunset","unixTime","offset","dt","Date","getUTCHours","getUTCMinutes","substr","convertTime","timezone","class","id","name","description","src","alt","temp","feels_like","temp_max","temp_min","humidity","wind","clouds","App","useState","setWeather","cityname","setLocations","language","setLanguage","ifClicked","console","log","endpoint","process","fetch","then","res","json","weather","main","speed","all","sys","catch","error","useEffect","type","value","onChange","e","target","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAuCeA,MApCf,SAAwBC,GAEpB,IAAMC,EAAO,2CAAuCD,EAAME,KAAKC,KAAlD,WAUPC,EARN,SAAqBC,EAAUC,GAC7B,IAAIC,EAAK,IAAIC,KAA2B,KAArBH,EAAWC,IAI9B,OAHQC,EAAGE,cAEC,KADJ,IAAMF,EAAGG,iBACGC,QAAQ,GAIfC,CAAYZ,EAAME,KAAKE,OAAQJ,EAAME,KAAKW,UAEzD,OAEE,sBAAKC,MAAM,kBAAX,UACA,mBAAGC,GAAG,SAAN,SAAgBf,EAAME,KAAKc,OAC3B,mBAAGD,GAAG,UAAN,SAAiBf,EAAME,KAAKe,cAC5B,qBAAKC,IAAKjB,EAASkB,IAAI,iBACvB,0BAASL,MAAM,oBAAf,UACE,yCAAYd,EAAME,KAAKkB,QACvB,+CAAkBpB,EAAME,KAAKmB,cAC7B,6CAAgBrB,EAAME,KAAKoB,YAC3B,6CAAgBtB,EAAME,KAAKqB,eAE7B,0BAAST,MAAM,oBAAf,UACE,6CAAgBd,EAAME,KAAKsB,YAC3B,yCAAYxB,EAAME,KAAKuB,QACvB,gDAAmBzB,EAAME,KAAKwB,UAC9B,2CAActB,Y,MCsCPuB,MAlEf,WAGA,MAA2BC,mBAAS,IAApC,mBAAO1B,EAAP,KAAa2B,EAAb,KACA,EAAiCD,mBAAS,UAA1C,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAgCH,mBAAS,MAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KASA,SAASC,IAGPC,QAAQC,IAAI,SAEZ,IAAMC,EAAQ,4DAAwDP,EAAxD,kBARHQ,mCAQG,8BAAsGN,GAGpHO,MAAMF,GACLG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACtC,GACLiC,QAAQC,IAAIlC,GACZ2B,EAAW,CACTb,KAAMd,EAAKc,KACXC,YAAaf,EAAKyC,QAAQ,GAAG1B,YAC7BG,KAAMlB,EAAK0C,KAAKxB,KAChBC,WAAYnB,EAAK0C,KAAKvB,WACtBE,SAAUrB,EAAK0C,KAAKrB,SACpBD,SAAUpB,EAAK0C,KAAKtB,SACpBE,SAAUtB,EAAK0C,KAAKpB,SACpBC,KAAMvB,EAAKuB,KAAKoB,MAChBnB,OAAQxB,EAAKwB,OAAOoB,IACpBjC,SAAUX,EAAKW,SACfT,OAAQF,EAAK6C,IAAI3C,OACjBD,KAAMD,EAAKyC,QAAQ,GAAGxC,OAExBgC,QAAQC,IAAIlC,MAEb8C,OAAM,SAACC,GAAD,OAAWd,QAAQC,IAAIa,MAK9B,OAvCFC,qBAAU,kBAAMhB,MAAa,IAwCzB,sBAAKpB,MAAM,MAAX,UACE,oBAAIA,MAAM,QAAV,sCACA,sBAAKA,MAAM,SAAX,UACE,uBAAOqC,KAAK,OAAOC,MAAOtB,EAAUuB,SAAU,SAACC,GAAD,OAAOvB,EAAauB,EAAEC,OAAOH,UAC3E,wBAAQD,KAAK,SAASrC,MAAM,gBAAgB0C,QAAStB,EAArD,SAAgE,sBAAMpB,MAAM,iBAAZ,yBAElE,uBACA,cAAC,EAAD,CAAgBZ,KAAMA,IACtB,uBACA,yBAAQc,KAAK,WAAWqC,SAAU,SAACC,GAAD,OAAOrB,EAAYqB,EAAEC,OAAOH,QAA9D,UACI,wBAAQA,MAAM,KAAd,qBACA,wBAAQA,MAAM,KAAd,yBAEJ,2CAAcpB,S,MC5DpByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.2c7bf890.chunk.js","sourcesContent":["import React from 'react';\r\nimport './weather-display.css'\r\n\r\nfunction WeatherDisplay(props) {\r\n\r\n    const iconUrl = `http://openweathermap.org/img/wn/${props.data.icon}@2x.png`\r\n\r\n    function convertTime(unixTime, offset){\r\n      let dt = new Date((unixTime + offset) * 1000)\r\n      let h = dt.getUTCHours()\r\n      let m = \"0\" + dt.getUTCMinutes()\r\n      let t = h + \":\" + m.substr(-2)\r\n      return t\r\n  }\r\n\r\n    const sunset = convertTime(props.data.sunset, props.data.timezone)\r\n\r\n    return (\r\n  \r\n      <div class=\"current_weather\">\r\n      <p id=\"header\">{props.data.name}</p>\r\n      <p id=\"header2\">{props.data.description}</p>\r\n      <img src={iconUrl} alt=\"Enter a city\"></img>\r\n      <section class=\"weather_container\">\r\n        <div>Temp: {props.data.temp}</div>\r\n        <div>Feels like: {props.data.feels_like}</div>\r\n        <div>Max temp: {props.data.temp_max}</div>\r\n        <div>Min temp: {props.data.temp_min}</div>\r\n      </section>\r\n      <section class=\"weather_container\">\r\n        <div>Humidity: {props.data.humidity}</div>\r\n        <div>Wind: {props.data.wind}</div>\r\n        <div>Cloud cover: {props.data.clouds}</div>\r\n        <div>Sunset: {sunset}</div>\r\n      </section>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default WeatherDisplay","import React, {useState} from 'react';\nimport WeatherDisplay from './weather-display';\nimport './App.css';\nimport { useEffect } from 'react';\n\nfunction App() {\n\n//Set states\nconst [data, setWeather] = useState({});\nconst [cityname, setLocations] = useState(\"London\");\nconst [language, setLanguage] = useState(\"en\");\n\n//Renders weather on default\nuseEffect(() => ifClicked(), [])\n\n//Loads APIkey from .env file\nlet APIkey = process.env.REACT_APP_KEY\n\n//Renders ifClicked\nfunction ifClicked() {\n\n\n  console.log(\"click\")\n\n  const endpoint = `https://api.openweathermap.org/data/2.5/weather?q=${cityname}&appid=${APIkey}&units=metric&lang=${language}`\n\n\n  fetch(endpoint)\n  .then((res) => res.json())\n  .then((data) => {\n    console.log(data)\n    setWeather({\n      name: data.name,\n      description: data.weather[0].description,\n      temp: data.main.temp,\n      feels_like: data.main.feels_like,\n      temp_min: data.main.temp_min,\n      temp_max: data.main.temp_max,\n      humidity: data.main.humidity,\n      wind: data.wind.speed,\n      clouds: data.clouds.all,\n      timezone: data.timezone,\n      sunset: data.sys.sunset,\n      icon: data.weather[0].icon\n    });\n    console.log(data);\n  })\n  .catch((error) => console.log(error))\n}\n\n\n\n  return (\n    <div class=\"App\">\n      <h1 class=\"title\">Weather Around The World</h1>\n      <div class=\"Search\">\n        <input type=\"text\" value={cityname} onChange={(e) => setLocations(e.target.value)} />\n        <button type=\"submit\" class=\"search_button\" onClick={ifClicked}><span class=\"material-icons\">search</span></button>\n      </div>\n      <br/>\n      <WeatherDisplay data={data}/>\n      <br/>\n      <select name=\"Language\" onChange={(e) => setLanguage(e.target.value)}>\n          <option value=\"en\">English</option>\n          <option value=\"ja\">Japanese</option>\n      </select>\n      <p>Language: {language}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}